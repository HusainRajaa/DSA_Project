// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
  items         Item[]    // A user can post many items
}

model Item {
  id          String   @id @default(cuid())
  title       String
  description String
  category    String   // e.g., "Electronics", "ID Card", "Apparel"
  location    String   // e.g., "Library", "Main Building", "Canteen"
  imageUrl    String?  // Optional image URL
  status      Status   @default(UNCLAIMED)
  type        ItemType // Is it a LOST or FOUND item report?
  isApproved  Boolean  @default(false) // For admin moderation
  createdAt   DateTime @default(now())
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
}

// --- Enums for specific roles and statuses ---
enum Role {
  USER
  ADMIN
}

enum Status {
  UNCLAIMED
  CLAIMED
}

enum ItemType {
  LOST
  FOUND
}

// --- Models required for NextAuth.js ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}